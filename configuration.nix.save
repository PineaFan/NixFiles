# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, lib, ... }:

{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
    ];

  # Bootloader.
  boot.loader.systemd-boot.enable = true;
   boot.loader.efi.canTouchEfiVariables = true;

  # Setup keyfile
  boot.initrd.secrets = {
    "/crypto_keyfile.bin" = null;
  };

  # Enable swap on luks
  boot.initrd.luks.devices."luks-917b603c-d076-490c-83e5-7985228dbcf4".device = "/dev/disk/by-uuid/917b603c-d076-490c-83e5-7985228dbcf4";
  boot.initrd.luks.devices."luks-917b603c-d076-490c-83e5-7985228dbcf4".keyFile = "/crypto_keyfile.bin";
  boot.initrd.systemd.enable = true;
  boot.initrd.luks.devices."luks-e23a754d-3823-4d14-9917-759be714a370".crypttabExtraOpts = ["fido2-device=auto"];

  networking.hostName = "nixos"; # Define your hostname.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";
  
  # Nix settings
  nix.settings = {
    substituters = [
      "https://cache.garnix.io/"
    ];
    trusted-public-keys = [
      "cache.garnix.io:CTFPyKSLcx5RMJKfLo5EEPUObbA78b0YQ2DTCJXqr9g="
    ];
    experimental-features = [
      "nix-command"
      "flakes"
    ];
    keep-outputs = true;
    keep-derivations = true;
  };

  # Enable networking
  networking.networkmanager.enable = true;

  # Set your time zone.
  time.timeZone = "Europe/London";

  # Select internationalisation properties.
  i18n.defaultLocale = "en_GB.UTF-8";

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "en_GB.UTF-8";
    LC_IDENTIFICATION = "en_GB.UTF-8";
    LC_MEASUREMENT = "en_GB.UTF-8";
    LC_MONETARY = "en_GB.UTF-8";
    LC_NAME = "en_GB.UTF-8";
    LC_NUMERIC = "en_GB.UTF-8";
    LC_PAPER = "en_GB.UTF-8";
    LC_TELEPHONE = "en_GB.UTF-8";
    LC_TIME = "en_GB.UTF-8";
  };

  # Enable the X11 windowing system.
  services.xserver.enable = true;

  # Enable the KDE Plasma Desktop Environment.
  # services.xserver.displayManager.sddm.enable = true;
  services.xserver.displayManager.gdm.enable = true;
  services.xserver.desktopManager.plasma5.enable = true;

  # Configure keymap in X11
  services.xserver = {
    layout = "gb";
    xkbVariant = "";
  };

  # Configure console keymap
  console.keyMap = "uk";

  # Enable CUPS to print documents.
  services.printing.enable = true;

  # Enable sound with pipewire.
  sound.enable = true;
  hardware.pulseaudio.enable = false;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # If you want to use JACK applications, uncomment this
    #jack.enable = true;

    # use the example session manager (no others are packaged yet so this is enabled by default,
    # no need to redefine it in your config for now)
    #media-session.enable = true;
  };

  # Enable touchpad support (enabled default in most desktopManager).
  # services.xserver.libinput.enable = true;

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.pineapplefan = {
    isNormalUser = true;
    description = "PineappleFan";
    extraGroups = [ "networkmanager" "wheel" ];
    packages = with pkgs; [
      tetrio-desktop
      mongodb-compass
      prismlauncher
      chromium
      kate
      vscode-fhs
      discord-canary
      git
      gnupg
      bitwarden
      libsForQt5.kdenlive
      helvum
      playerctl
      pulseaudio
      blender
      nodePackages.pnpm
      gcc-unwrapped
      libsForQt5.kfind
      jdk17

      obs-studio

      pridefetch
      zoxide
      bat
      eza

      (python311.withPackages (
        pyPackages: with pyPackages; [
          pip
          virtualenv
          opencv4
          flatbuffers
          numpy
          psutil
          openrazer
          aiohttp
        ]
      ))
    ];
  };
  environment.shellAliases = {
    openrgb = "openrgb --gui --client localhost:6767";
  };
  # programs.java = { enable = true; package = pkgs.oraclejre8; };
  # ZSH
  programs.zsh = {
    enable = true;
    shellInit = ''
      eval "$(zoxide init zsh --cmd=cd)"
      pridefetch -f nonbinary -a
      function ls {
        if [ -t 1 ] ; then
          eza --icons -lghF --git --group-directories-first "$@" --colour=always | less --quit-if-one-screen
        else
          ls "$@"
        fi
      }
    '';
    autosuggestions.enable = true;
    enableCompletion = true;
    syntaxHighlighting.enable = true;
    shellAliases = {
      l = "ls -alh";
      update = "sudo nixos-rebuild switch";
      cat = "bat --pager \"less -+S\"";
      gitgraph = "git log --graph --oneline --decorate";
      I-FUCKING-SAID-PULL = "f(){ git reset --hard origin/\"$@\"; unset -f f; }; f";
    };
    histSize = 10000;
    histFile = "$HOME/.config/zsh_history";
    ohMyZsh = {
      enable = true;
      theme = "crunch";
      customPkgs = with pkgs; [zsh-fzf-tab];
      plugins = [ "git" ];
    };
  };
  # Steam
  programs.steam.enable = true;
  programs.steam.remotePlay.openFirewall = true;
  # Bluetooth
  hardware.bluetooth.enable = true;
  # OpenRGB
  services.hardware.openrgb.enable = true;
  services.hardware.openrgb.server.port = 6767;
  # YubiKey and Login
  security.pam.u2f.enable = true;
  security.pam.services = {
    login.u2fAuth = true;
    sudo.u2fAuth = true;
  };
  # OBS
  boot.extraModulePackages = with config.boot.kernelPackages; [ v4l2loopback ];
  boot.kernelModules = [
    "v4l2loopback"
  ];
  
  services.avahi = {
    enable = true;
    nssmdns = true;  # printing
    publish = {
      enable = true;
      addresses = true;
      workstation = true;
      userServices = true;
    };
  };

  security.pam.u2f.cue = true;
  security.pam.u2f.authFile = ./Yubico/u2f_keys;
  security.polkit.enable = true;
  # boot.initrd.systemd.enable = true;
  # boot.initrd.luks.devices."luks-917b603c-d076-490c-83e5-7985228dbcf4".crypttabExtraOpts = ["fido2-device=auto"];
  
  # GPG
  programs.gnupg.agent.enable = true;
  # KDE Connect
  programs.kdeconnect.enable = true;

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
  #  vim # Do not forget to add an editor to edit configuration.nix! The Nano editor is also installed by default.
    wget
    nodejs
    direnv nix-direnv
  ];
  environment.pathsToLink = [
    "/share/nix-direnv"
  ];
  environment.variables.NIXPKGS_ALLOW_UNFREE = "1";
  /*nixpkgs.overlays = [
    (self: super: { nix-direnv = super.nix-direnv.override { enableFlakes = true; }; } )
  ];*/

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  networking.firewall.enable = false;

  # GPU stuff (I hate nvidia)
  hardware.opengl = {
    enable = true;
    driSupport = true;
    driSupport32Bit = true;
  };
  hardware.nvidia = {

    # Modesetting is needed for most wayland compositors
    modesetting.enable = true;

    # Use the open source version of the kernel module
    # Only available on driver 515.43.04+
    open = true;

    # Enable the nvidia settings menu
    nvidiaSettings = true;

    # Optionally, you may need to select the appropriate driver version for your specific GPU.
    package = config.boot.kernelPackages.nvidiaPackages.stable;
  };
  # Tell Xorg to use the nvidia driver
  services.xserver.videoDrivers = ["nvidia"];

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "23.05"; # Did you read the comment?

}
